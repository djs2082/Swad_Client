{"ast":null,"code":"import axios from 'axios';\nimport { showToaster } from './actions';\nimport { authHeaders } from './authConstants';\nimport { getItemFromStorage } from './service';\nconst modifiedAxiosInstance = axios.create();\nconst handleErrors = (store, error) => {\n  if (process.env.NODE_ENV === 'development') console.log('Error Logging :: ', error.message, JSON.stringify(error));\n  store.dispatch(showToaster({\n    message: error.message,\n    type: 'error'\n  }));\n  return Promise.reject(error);\n};\nconst setAuthHeadersInInterceptors = config => {\n  if (!getItemFromStorage('access-token')) {\n    authHeaders.forEach(header => {\n      config.headers.common[header] = getItemFromStorage(header);\n    });\n  }\n  return config;\n};\nexport const setupInterceptor = store => {\n  modifiedAxiosInstance.interceptors.response.use(response => response, error => handleErrors(store, error));\n  modifiedAxiosInstance.interceptors.request.use(config => setAuthHeadersInInterceptors(config), error => Promise.reject(error));\n};","map":{"version":3,"names":["axios","showToaster","authHeaders","getItemFromStorage","modifiedAxiosInstance","create","handleErrors","store","error","process","env","NODE_ENV","console","log","message","JSON","stringify","dispatch","type","Promise","reject","setAuthHeadersInInterceptors","config","forEach","header","headers","common","setupInterceptor","interceptors","response","use","request"],"sources":["/Users/dilipjoshi/Desktop/learning/Swad/swad-client/src/Config/base.tsx"],"sourcesContent":["import axios from 'axios';\nimport { Error } from './main.types';\nimport { showToaster } from './actions';\nimport { authHeaders } from './authConstants';\nimport { getItemFromStorage } from './service';\n\nconst modifiedAxiosInstance = axios.create();\n\nconst handleErrors = (store:any, error:Error) => {\n  if (process.env.NODE_ENV === 'development')\n      console.log('Error Logging :: ', error.message, JSON.stringify(error));\n    store.dispatch(showToaster({ message: error.message, type: 'error' }));\n  return Promise.reject(error);\n}\n\nconst setAuthHeadersInInterceptors = (config:any) => {\n    if (!getItemFromStorage('access-token')) {\n      authHeaders.forEach((header) => {\n        config.headers.common[header] = getItemFromStorage(header)\n      })\n    }\n    return config;\n};\n\n\nexport const setupInterceptor = (store:Object) => {\n  modifiedAxiosInstance.interceptors.response.use(\n    (response:any) => response,\n    (error:Error) => handleErrors(store, error),\n  );\n\n  modifiedAxiosInstance.interceptors.request.use(\n    (config:Object) => setAuthHeadersInInterceptors(config),\n    (error:Object) => Promise.reject(error),\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,WAAW,QAAQ,WAAW;AACvC,SAASC,WAAW,QAAQ,iBAAiB;AAC7C,SAASC,kBAAkB,QAAQ,WAAW;AAE9C,MAAMC,qBAAqB,GAAGJ,KAAK,CAACK,MAAM,CAAC,CAAC;AAE5C,MAAMC,YAAY,GAAGA,CAACC,KAAS,EAAEC,KAAW,KAAK;EAC/C,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EACtCC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEL,KAAK,CAACM,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACR,KAAK,CAAC,CAAC;EACxED,KAAK,CAACU,QAAQ,CAAChB,WAAW,CAAC;IAAEa,OAAO,EAAEN,KAAK,CAACM,OAAO;IAAEI,IAAI,EAAE;EAAQ,CAAC,CAAC,CAAC;EACxE,OAAOC,OAAO,CAACC,MAAM,CAACZ,KAAK,CAAC;AAC9B,CAAC;AAED,MAAMa,4BAA4B,GAAIC,MAAU,IAAK;EACjD,IAAI,CAACnB,kBAAkB,CAAC,cAAc,CAAC,EAAE;IACvCD,WAAW,CAACqB,OAAO,CAAEC,MAAM,IAAK;MAC9BF,MAAM,CAACG,OAAO,CAACC,MAAM,CAACF,MAAM,CAAC,GAAGrB,kBAAkB,CAACqB,MAAM,CAAC;IAC5D,CAAC,CAAC;EACJ;EACA,OAAOF,MAAM;AACjB,CAAC;AAGD,OAAO,MAAMK,gBAAgB,GAAIpB,KAAY,IAAK;EAChDH,qBAAqB,CAACwB,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC5CD,QAAY,IAAKA,QAAQ,EACzBrB,KAAW,IAAKF,YAAY,CAACC,KAAK,EAAEC,KAAK,CAC5C,CAAC;EAEDJ,qBAAqB,CAACwB,YAAY,CAACG,OAAO,CAACD,GAAG,CAC3CR,MAAa,IAAKD,4BAA4B,CAACC,MAAM,CAAC,EACtDd,KAAY,IAAKW,OAAO,CAACC,MAAM,CAACZ,KAAK,CACxC,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}